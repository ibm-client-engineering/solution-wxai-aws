"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9185],{2670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=n(5893),i=n(1151);const s={id:"upi_install",sidebar_position:3,title:"UPI Installation Instructions",custom_edit_url:null},o=void 0,l={id:"Deployment/upi_install",title:"UPI Installation Instructions",description:"Prepare the Bastion Node",source:"@site/docs/2-Deployment/3-UPI_Install.mdx",sourceDirName:"2-Deployment",slug:"/Deployment/upi_install",permalink:"/solution-wxai-aws/Deployment/upi_install",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"upi_install",sidebar_position:3,title:"UPI Installation Instructions",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"STS Installation Instructions",permalink:"/solution-wxai-aws/Deployment/sts_install"},next:{title:"Transition",permalink:"/solution-wxai-aws/transition"}},a={},d=[{value:"Prepare the Bastion Node",id:"prepare-the-bastion-node",level:3},{value:"Update the OS and install additional tools",id:"update-the-os-and-install-additional-tools",level:4},{value:"Clone the repository to the bootnode.",id:"clone-the-repository-to-the-bootnode",level:4},{value:"Run &#39;setup_bastion&#39; script",id:"run-setup_bastion-script",level:4},{value:"Change the bootnode hostname to &#39;registry.$DOMAIN&#39;",id:"change-the-bootnode-hostname-to-registrydomain",level:4},{value:"Setup Services",id:"setup-services",level:3},{value:"Create Registry",id:"create-registry",level:4},{value:"Start the registry",id:"start-the-registry",level:4},{value:"Add your local registry login details",id:"add-your-local-registry-login-details",level:4},{value:"Add your details to the auth.json",id:"add-your-details-to-the-authjson",level:4},{value:"Setup Local and Internal registries",id:"setup-local-and-internal-registries",level:3},{value:"Load the registry with the OCP files",id:"load-the-registry-with-the-ocp-files",level:4},{value:"Extract the OpenShift Installer",id:"extract-the-openshift-installer",level:4},{value:"Start cluster creation",id:"start-cluster-creation",level:3},{value:"Collect information for &#39;config.sh&#39;",id:"collect-information-for-configsh",level:4},{value:"Start the installation",id:"start-the-installation",level:4}];function c(e){const t={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"prepare-the-bastion-node",children:"Prepare the Bastion Node"}),"\n",(0,r.jsx)(t.h4,{id:"update-the-os-and-install-additional-tools",children:"Update the OS and install additional tools"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"sudo yum update -y; sudo yum install git -y\n"})}),"\n",(0,r.jsx)(t.h4,{id:"clone-the-repository-to-the-bootnode",children:"Clone the repository to the bootnode."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"git clone https://github.com/ibm-client-engineering/solution-wxai-aws\n"})}),"\n",(0,r.jsx)(t.h4,{id:"run-setup_bastion-script",children:"Run 'setup_bastion' script"}),"\n",(0,r.jsx)(t.p,{children:"Run the 'setup_bastion' script which will install additional tools, and configure an HTTP server to host the Bootstrap ignition file."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"cd $HOME/aws-openshift410-cloudformation-noIAM-noR53/utils\n./setup_bastion.sh\n"})}),"\n",(0,r.jsx)(t.h4,{id:"change-the-bootnode-hostname-to-registrydomain",children:"Change the bootnode hostname to 'registry.$DOMAIN'"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"sudo hostnamectl set-hostname registry.$DOMAIN.com\nsudo reboot\n"})}),"\n",(0,r.jsx)(t.h3,{id:"setup-services",children:"Setup Services"}),"\n",(0,r.jsx)(t.h4,{id:"create-registry",children:"Create Registry"}),"\n",(0,r.jsx)(t.p,{children:"Create a new directory for the registry, select a port (suggested port: 5000), a username and a password."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"sudo mkdir -p /ibm/\nsudo chown -R ec2-user:ec2-user /ibm/\n./create_registry.sh <registry_directory> <port> <userid> <password> <local_dir_install>\n"})}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"./create_registry.sh /ibm 5000 wxai CeFsm2024 /home/ec2-user/openshift-upi-master/aws-openshift410-cloudformation-noIAM-noR53\n"})}),"\n",(0,r.jsx)(t.h4,{id:"start-the-registry",children:"Start the registry"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"./start_registry.sh <registry_directory> <port>\n"})}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"./start_registry.sh /ibm 5000\n"})}),"\n",(0,r.jsx)(t.h4,{id:"add-your-local-registry-login-details",children:"Add your local registry login details"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"mkdir -p /ibm/security/auth/\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"echo -n '<user_name>:<password>' | base64 -w0 \n"})}),"\n",(0,r.jsx)(t.h4,{id:"add-your-details-to-the-authjson",children:"Add your details to the auth.json"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'{\n  "auths": {\n    "<mirror_registry>": { \n      "auth": "<credentials>", \n      "email": "you@example.com"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"<mirror_registry> - the URL of the registry including the port\n<credentials> - the output from \"echo -n '<user_name>:<password>' | base64 -w0 \"\n"})}),"\n",(0,r.jsx)(t.p,{children:"Confirm the registry is accessible:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"podman login <Registry_URL> --authfile /ibm/security/auth/auth.json\n"})}),"\n",(0,r.jsx)(t.h3,{id:"setup-local-and-internal-registries",children:"Setup Local and Internal registries"}),"\n",(0,r.jsx)(t.h4,{id:"load-the-registry-with-the-ocp-files",children:"Load the registry with the OCP files"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"./load_ocp.sh <ocprelease> <registryip:port> <contentpath> <authfile>\n"})}),"\n",(0,r.jsx)(t.p,{children:"Example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"./load_ocp.sh 4.14.9 registry.cpdu8vscs.ibmworkshops.com:5000 /ibm/openshift-4.14.9/export /ibm/openshift/auth.json\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'export OCP_RELEASE="4.14.9"\n\nexport LOCAL_REGISTRY="registry.cpdu8vscs.ibmworkshops.com:5000"\n\nexport LOCAL_REPOSITORY="openshift"\n\nexport PRODUCT_REPO="openshift-release-dev"\n\nexport RELEASE_NAME="ocp-release"\n\nexport ARCHITECTURE="x86_64"\n\nexport REMOVABLE_MEDIA_PATH="/ibm/ocp-images"\n\nexport LOCAL_SECRET_JSON="/ibm/openshift/auth.json"\n\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"Review images and configurations"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"oc adm release mirror -a ${LOCAL_SECRET_JSON} --from=quay.io/${PRODUCT_REPO}/${RELEASE_NAME}:${OCP_RELEASE}-${ARCHITECTURE} --to=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY} --to-release-image=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}-${ARCHITECTURE} --dry-run\n"})}),"\n",(0,r.jsx)(t.p,{children:"Pull down images and send to local registry."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'oc image mirror -a ${LOCAL_SECRET_JSON} --from-dir=${REMOVABLE_MEDIA_PATH}/mirror "file://openshift/release:${OCP_RELEASE}*" ${LOCAL_REGISTRY}/${LOCAL_REPOSITORY} \n'})}),"\n",(0,r.jsx)(t.h4,{id:"extract-the-openshift-installer",children:"Extract the OpenShift Installer"}),"\n",(0,r.jsx)(t.p,{children:"Generate the openshift-install binary for the version of openshift images that were pulled."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'oc adm release extract -a ${LOCAL_SECRET_JSON} --command=openshift-install "${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}-${ARCHITECTURE}"\n'})}),"\n",(0,r.jsx)(t.p,{children:"Move openshift-install to /usr/bin."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"sudo mv openshift-install /usr/bin/openshift-install\n"})}),"\n",(0,r.jsx)(t.h3,{id:"start-cluster-creation",children:"Start cluster creation"}),"\n",(0,r.jsx)(t.h4,{id:"collect-information-for-configsh",children:"Collect information for 'config.sh'"}),"\n",(0,r.jsx)(t.p,{children:"Information needed to update 'config.sh'"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Cluster Name\nBase Domain\nRegistry URL\nLocal Pull Secret updated with local registry auth.\nAdditional Trust certs generated during the registry creation process.\nAWS Region\nAWS Private Subnets\nAWS VPC ID\nAWS VPC CIDR\nAWS RHCOS AMI ID\n\nBootstrap allowed SSH CIDR\nBootstrap Ignition URL (Bastion node's hostname, port, and file name)\nMaster Instance Type\nWorker Count\nWorker Instance Type\n"})}),"\n",(0,r.jsx)(t.p,{children:"****Important Node: AWS CLI will need to be configured, and output format MUST be json"}),"\n",(0,r.jsx)(t.h4,{id:"start-the-installation",children:"Start the installation"}),"\n",(0,r.jsx)(t.p,{children:'After updating config.sh, run "create_cluster_step_1.sh".'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"./create_cluster_step_1.sh\n"})}),"\n",(0,r.jsx)(t.p,{children:"Once this completes, create the DNS records listed in the script output:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"api.{ClusterName}.{DOMAINNAME} -> wxai-int-(random_string).elb.us-east-2.amazonaws.com\napi-int.{ClusterName}.{DOMAINNAME} -> wxai-int-(random_string).elb.us-east-2.amazonaws.com\n*.apps.{ClusterName}.{DOMAINNAME} -> wxai-int-(random_string).elb.us-east-2.amazonaws.com\n"})}),"\n",(0,r.jsx)(t.p,{children:"Now run step 2:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"./create_cluster_step_2.sh\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>o});var r=n(7294);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);